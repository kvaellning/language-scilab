scopeName: 'source.scilab'
name:      'Scilab'
fileTypes: ['sci', 'sce']

patterns: [
  { include: 'source.scilab.version-specific#scilab_comment' }

  {
    comment: 'Scilab function definition (one line)'
    match:  '(?:(?:^|;)\\s*)' + # all in front
            '(function)'                  + # function-tag
            '(?!'   + # but there is nowhere
              '.*?'  +
              '(?:' +
                '(?:\\.\\.)'  +   # continuation marks (will be handled by other pattern)
                '|(?:\\))'    +   # or a closing parentheses (will be handled by other pattern)
              ')'   +
              '(?:\\s*//)?'  + # but only in front of comments
            ')\\s+' +
            '(' +
              '(?:'  +
                '[^;](?!//)'  +  # all remaining stuff without comments
              ')++' +
            ')'

    name: 'meta.function.scilab'

    captures:
      1:
        comment: 'function keyword'
        name: 'storage.type.function.begin.scilab'
      2:
        patterns: [
          { include: 'source.scilab.version-specific#scilab_comment'  }
          { include: '#function_declaration'  }
        ]
  }

  {
    comment: 'Scilab function definition (multiple lines)'
    begin:  '(?:' +
              '(?:(?:^|;)\\s*)'  + # any valid stuff before
              '(function)'       + # function keyword
              '(?:\\s+|(?:\\s*(?=\\[)))'  +
            ')'     +
            '(?!;)' +
            '(?:'   +
              '(?=\\[[^\\];]+\\.\\.)' +
              '|(?=[^;]*?[^/]{2,})'  +
            ')'
    end: '(?<=\\)|;)(?:\\s*([\\.]{2,}))?'

    name: 'meta.function.scilab'

    beginCaptures:
      1:
        comment: 'function keyword'
        name: 'storage.type.function.begin.scilab'

    endCaptures:
      1:
        comment: 'invalid line continuation after function'
        name:    'punctuation.separator.continuation.invalid.illegal.scilab'

    patterns: [
      { include: 'source.scilab.version-specific#scilab_comment'  }
      { include: '#function_declaration'                          }
    ]
  }

  {
    comment: 'End of a function (a.k.a. "endfunction" tag'
    match: '\\s*endfunction(?![a-zA-Z_%\\$\\?!#])'
    name: 'storage.type.function.end.scilab'
  }

  { include: '#invalid_operators_all' } # check before assignments to get invalid operators with leading equal (=)
  { include: '#operators_assignment'  }
  { include: '#variable_assignment'   }

  { include: '#std_environment'   }

  { include: '#vector_colon'  }
]

# ------------------------------
# additional definitions
# ------------------------------
repository:
  std_environment:
    {
      comment: 'This includes all constants and data types which are used for scoping'
      patterns: [

        { include: '#continuation_mark' }
        { include: '#numbers'           }

        { include: 'source.scilab.version-specific#name_too_long'         }
        { include: '#invalid_signs'         }
        { include: '#invalid_operators_all' }

        { include: '#operators'   }
        { include: '#parentheses' }
        #{ include: '#parentheses_block' }

        { include: '#simple_function_call'  }

        { include: '#constants_matrix_vector'                       }
        { include: '#constants_scilab'                              }
        { include: 'source.scilab.version-specific#constants_empty' }
        
        { include: '#keywords'  }

        { include: 'source.scilab.version-specific#functions'  }

        { include: '#statement_terminator' }

        { include: '#strings'      }
        { include: '#struct_tlist' }

        # {
        #   comment: 'unmatched closing parentheses'
        #   match:   '\\)'
        #   name:    'punctuation.parens.invalid.illegal.scilab'
        # }
      ]
    }

  # ------------------------------
  builtins:
    {
      comment: 'builtin functions & constants'
      patterns: [
        { include: 'source.scilab.version-specific#functions'       }
        { include: '#constants_matrix_vector'                       }
        { include: '#constants_scilab'                              }
        { include: 'source.scilab.version-specific#constants_empty' }
      ]
    }

  # ------------------------------
  # all things which are available in the function declaration
  function_declaration:
    {
      patterns: [

        { include: 'source.scilab.version-specific#scilab_comment'  }
        { include: '#invalid_signs'   }
        { include: 'source.scilab.version-specific#name_too_long'   }

        # ----------------
        # stuff between return values and equal sign
        # ----------------
        {
          match: '(?<=\\])(?!\\=)(?:.(?!//))*(?=\\=)'

          captures:
            0:
              patterns: [
                {
                  match: '[^\\s]+'
                  name:  'invalid.illegal.scilab'
                }
          ]
        }

        {
          begin: '(?<=\\])(?!\\=)'
          end:   '(?=\\=)'

          patterns: [
            { include: 'source.scilab.version-specific#scilab_comment'    }
            { include: '#continuation_mark' }

            {
              match: '[^\\s]+'
              name:  'invalid.illegal.scilab'
            }
          ]
        }

        # ----------------
        # return values
        # ----------------
        {
          comment: 'return value (one line)'
          match:   '([^\\[\\]]+?)\\s*(?=\\=)'

          captures:
            1:
              name: 'meta.function.parameters.return.scilab'
              patterns: [
                { include: '#function_returnContent'  }
              ]
        }

        {
          comment: 'return value (multiple lines) - introduced to have the possibility to "look ahead"'
          begin:   '\\s*([^\\[\\]\\=\\(\\\\)]+)(?=[\\.]{2,})'
          end:     '(?=\\=)'

          name: 'meta.function.parameters.return.scilab'

          beginCaptures:
            1:
              patterns: [
                { include: '#parameters_retval_multiline'  }
              ]

          patterns: [
            { include: '#parameters_retval_multiline'  }
          ]
        }

        {
          comment: 'return values (multiple values)'
          begin:   '\\['
          end:     '\\]'

          name:  'meta.function.parameters.return.scilab'

          beginCaptures:
            0:
              name: 'punctuation.section.brackets.begin.scilab'

          endCaptures:
            0:
              name: 'punctuation.section.brackets.end.scilab'

          patterns: [
            { include:  '#function_returnContent' }
          ]
        }

        # ----------------
        # assignment operator (=)
        {
          match:   '(\\=)(?!.*\\.{2,})'
          captures:
            1:
              name: 'keyword.operator.assignment.scilab'
        }

        {
          begin:  '(\\=)'
          end:    '(?=\\()'

          beginCaptures:
            1:
              name: 'keyword.operator.assignment.scilab'

          patterns: [
            { include: 'source.scilab.version-specific#scilab_comment'    }
            { include: '#continuation_mark' }

            {
              match: '[a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*'
              name: 'entity.name.function.scilab'
            }
          ]
        }

        # ----------------
        # function name
        {
          match: '[a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*'
          name: 'entity.name.function.scilab'
        }

        # ----------------
        # input values
        # ----------------
        {
          comment: 'input values'
          begin: '\\('
          end:   '\\)'

          name: 'meta.function.parameters.scilab'

          beginCaptures:
            0:
              name: 'punctuation.definition.parameters.begin.scilab'
          endCaptures:
            0:
              name: 'punctuation.definition.parameters.end.scilab'

          patterns: [
            {
              comment: 'invalid dot-accessor (.)'
              match:   '(?<!\\.)\\.(?!\\.)'
              name:    'punctuation.accessor.invalid.illegal.scilab'
            }
            {
              comment: 'numbers only are clearly illegal'
              match: '(?<![\\w%\\$\\?!#\\.])(?<=^|\\s|\\(|,)\\d+'
              name: 'variable.parameter.input.invalid.illegal.scilab'
            }
            {
              comment: 'Any parentheses stuff except of one ) is also clearly illegal'
              match: '(\\[)|(\\])|(\\()'

              captures:
                1:
                  name: 'punctuation.brackets.begin.invalid.illegal.scilab'
                2:
                  name: 'punctuation.brackets.end.invalid.illegal.scilab'
                3:
                  name: 'punctuation.parens.begin.invalid.illegal.scilab'
            }

            { include: 'source.scilab.version-specific#scilab_comment' }

            { include: '#std_environment' }

            { include:  '#parameters_input'     }
            { include:  '#parameter_separator' }
          ]
        } # input parameters
      ]
    } # function body

  # ------------------------------
  # all kinds of parameters and variables used for/in funcrion declarations
  #
  # Note:  They all share the same matching pattern, because for Scilab naming in
  #      regards of function / variables follow the same rules.
  #      They are just groupted here for easier copy & paste maintainance in futre.
  # ------------------------------
  function_returnContent:
    {
      patterns: [
        { include: 'source.scilab.version-specific#scilab_comment' }

        {
          comment: 'invalid dot-accessor (.)'
          match:   '(?<!\\.)\\.(?!\\.)'
          name:    'punctuation.accessor.invalid.illegal.scilab'
        }
        {
          comment: 'some brackets are illegal for defining return values'
          match:   '([a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*)?\\s*([\\(\\)\\{\\}])'

          captures:
            1:
              name: 'variable.parameter.output.invalid.illegal.scilab'
            2:
              name: 'punctuation.invalid.illegal.scilab'
        }
        {
          comment: 'numbers only are clearly illegal'
          match:   '(?<![\\w%\\$\\?!#\\.])(?<=^|\\s|\\[|,)\\d+'
          name:    'variable.parameter.output.invalid.illegal.scilab'
        }
        {
          comment: 'operators are all illegal'
          match:   '[\\+\\-\\*\\\\/\\^\\=\\<\\>\\~]'
          name:    'keyword.operator.invalid.illegal.scilab'
        }

        { include: '#std_environment' }

        {
          comment: 'output parameters of functions'
          match:   '[a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*'
          name:    'variable.parameter.output.scilab'
        }

        { include: '#parameter_separator' }
      ]
    }

  parameters_input:
    {
      comment: 'input parameters of functions'
      match: '[a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*'
      name: 'variable.parameter.input.scilab'
    }

  parameters_retval_multiline:
    {
      comment: 'special treatment for single retval over multiple lines'
      patterns: [
        {
          match: '^\\s*([a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*)(?=\\s*,)'
          captures:
            1:
              name: 'variable.parameter.output.invalid.illegal.scilab'
        }

        { include: '#function_returnContent'  }
      ]
    }

  parameter_separator:
    {
      match: ','
      name: 'punctuation.separator.parameter.scilab'
    }

  vector_colon:
    {
      comment: 'vector definition a:b & a:b:c'
      match: '\\b' +
            '(?<signs>\\+|-)?'                  +  #  optional leading +/-
            '(?<element>[\\w\\$\\?!%\\.\'\"]+)' +  #  first vector element
            ':'  +
            '\\g<signs>?'  +  #  optional leading +/-
            '\\g<element>' +  #  second vector element
            '(?:'       +
              ':'  +
              '\\g<signs>?'   +  #  optional leading +/-
              '\\g<element>'  +  #  optional third element
            ')?'
      captures:
        0:
          name: 'variable.parameter.vector.scilab'
          patterns: [
            {
              comment: 'avoid matching as invalid operator'
              match: ':(?:\\+|-)'
            }

            {  include:  '#std_environment' }
          ]
    }

  struct_tlist:
    patterns: [
      {
        comment: 'struct sub-element foo.FOO'
        match:  '(?:' +
                    '(?:(?<![\\w%\\$\\?!#\\)])(\\.))'  +  # invalid dot in front
                    '|(\\.)'  +
                  ')' +
                  '(?=[a-zA-Z_%\\$\\?!#])'

        captures:
          1:
            name: 'punctuation.accessor.invalid.illegal.scilab'
          2:
            name: 'punctuation.accessor.scilab'
      }

      {
        comment: 'struct/tlist member'
        match:   '(?<=\\.)[a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*'
                #  '++(?!\\.)'  # if active, only the last member is recognized

        name: 'variable.other.member.scilab'
      }

      {
        comment: 'invalid stuff'
        match:  '(?<=[\\w%\\$\\?!#])(\\.)'  +  # (definition that some variable character is standing in front of a dot)
                  '(?:'                     +
                    '(?=\\d)|'              + # trailing dot and number afterwards (struct error)
                    '(?=\\s|\\Z)'           + # lonely trailing dot
                  ')'
      
        captures:
          1:
            name: 'punctuation.accessor.invalid.illegal.scilab'
      }
    ]

  # ------------------------------
  # operators
  # ------------------------------
  operator_linear_system:
    {
      comment: 'Operators used for linear system simulation'
      match: '/\\.' # feedback operator
      name: 'keyword.operator.CACSD.scilab'
    }
    
  operators_vector_matrix:
    {
      comment: 'Vector/Matrix operators'
      match:   '\\.(?:\\*|/|\\^|\')'
      name:    'keyword.operator.arithmetic.matrix.scilab'
    }

  operators_arithmetic:
    {
      comment: 'Arithmetic operators'
      match: '\\+|-|\\*|/|\\\\|\\^|\\*\\*'  +  # elementary operators
              '|\\.(\\^|(\\*|/|\\\\)\\.?)'     # vector / matrix / kronecker operators
      name: 'keyword.operator.arithmetic.scilab'
    }

  operators_comparison:
    {
      comment: 'comparison operators'
      match: '\\=\\=|>\\=|<\\=|~\\=|>|<|<>'
      name: 'keyword.operator.comparison.scilab'
    }

  operators_assignment:
    {
      comment: 'assignment operators'
      match: '\\='
      name: 'keyword.operator.assignment.scilab'
    }

  operators:
    {
      patterns: [
        { include: '#operator_linear_system'  }
        { include: '#operators_vector_matrix' }
        { include: '#operators_arithmetic'    }
        { include: '#operators_comparison'    }

        { include: 'source.scilab.version-specific#operators' }
      ]
    }

  parentheses:
    {
      patterns: [
        {
          comment: 'denotes extraction or function call'
          match: '\\(|\\)'
          name:  'punctuation.brace.round.scilab'
        }
      ]
    }
  # ------------------------------
  # constants definition
  # ------------------------------
  numbers:
    {
      comment: 'Scilab numbers'
      match: '(?:' +
              '\\B(?:\\.[0-9]+)'            +  # numbers with leading dot (.) (interpreted as zero starting)
              '|\\b(?:[0-9]+\\.?[0-9]*)'    +  # "normal" numbers with optional dot (.) separator
            ')'  +
            '(?:(?:E|e)(?:\\+|-)?[0-9]+)?'  +  # optional exponential notation
            '([a-zA-Z_%\\$\\?!#])?'            # invalid trailing dot
      name: 'constant.numeric.scilab'
      captures:
        1:
          comment: 'invalid trailing dot-operator (.)'
          name: 'keyword.operator.invalid.illegal.scilab'
    }

  constants_scilab:
    {
      comment: 'Scilab built-in constants'
      match:  '(?<![\\w%\\$\\?!#\\.])'  +
                '(?:' +
                  '%(?:pi|e|eps|i|inf|io|nan|t|T|f|F|s|z)'  + # constants which yield values
                  '|SCI|SCIHOME|TMPDIR|varargin|varargout'  + # other variables
                ')(?![\\w%\\$\\?!#\\.])'
      name: 'support.constant.scilab'
    }

  constants_matrix_vector:
    {
      comment: 'matrix/vector access symbols : & $'
      match: '(?<![\\w%\\$\\?!#\'\"]):(?![\\w%\\$\\?!#\'\"])' + # (:) is only a constant if nothing is written in front or behind
               '|(?<![\\w%\\$\\?!#\'\"\\+\\-\\*\\\\])\\$'       # ($) is only a constant if nothing is written in front
      name : 'support.constant.scilab'
    }

  # ------------------------------
  # statement definitions
  # ------------------------------
  keywords_block_flow_alter:
    {
      comment: 'keywords that alter flow from within a block'
      name: 'keyword.control.statement.scilab'
      match: '(?<!\\.)\\b(break|continue|return)\\b'
    }

  keywords_loop:
    {
      comment: 'keywords that delimit loops'
      name: 'keyword.control.repeat.scilab'
      match: '(?<!\\.)\\b(do|for|while)\\b'
    }

  keywords_errors:
    {
      comment: 'keywords that delimit an error'
      name: 'keyword.control.exception.scilab'
      match: '(?<!\\.)\\b(try|catch)\\b'
    }

  keywords_conditionals:
    {
      comment: 'keywords that delimit flow conditionals'
      name: 'keyword.control.conditional.scilab'
      match: '(?<!\\.)\\b(if|elseif|else|select|case)\\b'
    }

  keywords_other:
    {
      comment: 'keywords which does not fit in any other category'
      name: 'keyword.control.scilab'
      match: '(?<!\\.)\\b(abort|clear|end|exit|pause|quit|resume|then)\\b'
    }

  keywords_global:
    {
      comment: 'global scope identifier'
      match: '(?<!\\.)\\b(global)\\b'
      name: 'storage.modifier.global.scilab'
    }

  keywords:
    patterns: [
      {  include:  '#keywords_block_flow_alter' }
      {  include:  '#keywords_loop'             }
      {  include:  '#keywords_errors'           }
      {  include:  '#keywords_conditionals'     }
      {  include:  '#keywords_other'            }
      {  include:  '#keywords_global'           }
    ]

  # ------------------------------
  # strings
  # ------------------------------
  string_single:
    {
      comment: 'single quoted strings'

      begin: '(?<![\\w\\]\\)\\.])\''
      end: '\'(?!\')'

      contentName: 'string.quoted.single.scilab'

      beginCaptures:
        0:
          name: 'punctuation.definition.string.begin.scilab'
      endCaptures:
        0:
          name: 'punctuation.definition.string.end.scilab'

      patterns: [
        {
          match: '\'\'|""'
          name: 'constant.character.escape.scilab'
        }
      ]
    }

  string_double:
    {
      comment: 'double quoted strings'

      begin: '"'
      end: '"(?!")'

      contentName: 'string.quoted.double.scilab'

      beginCaptures:
        0:
          name: 'punctuation.definition.string.begin.scilab'
      endCaptures:
        0:
          name: 'punctuation.definition.string.end.scilab'

      patterns: [
        {
          match: '\'\'|""'
          name: 'constant.character.escape.scilab'
        }
      ]
    }

  strings:
    {
      patterns: [
        { include: '#string_single' }
        { include: '#string_double' }
      ]
    }

  # ------------------------------
  # all kinds of invalid stuff
  # ------------------------------
  invalid_operators:
    {
      comment: 'invalid operators'
      match:  '\\.[\\+\\-\\^]\\.' # kronecker operators
      name: 'keyword.operator.invalid.illegal.scilab'
    }

  invalid_operator_combinations:
    {
      comment: 'invalid operator combinations'
      patterns: [
        {
          comment: 'more than two or three occurences'
          match:  '[><~\\\\:]{2,}'       + # match invalid doubling
                  '(?<![<>\\-]|&~)'      + # exceptions
                  '|[\\=\\*\\&\\|]{3,}'    # match from 3 occurences
          name:   'keyword.operator.invalid.illegal.scilab'
        }
        {
          comment: 'leading dot(s) (.)'
          match:  '(?!\\d)\\.{1,}[&\\|><~\\+\\-\\\\]'
          name:   'keyword.operator.invalid.illegal.scilab'
        }
        {
          comment: 'leading equal'
          match:  '(?:\\={1,}[&\\|><~\\*/\\\\:;])' + # standard for all but trailing minus (-) and plus (+)
                  '|(?:[\\=]{3,}[\\+|\\-]+)'         # special cases for minus and plus, since the following operator is interpreted as (polarity) sign of a number
          name:   'keyword.operator.invalid.illegal.scilab'
        }
        {
          comment: 'trailing dot (.)'
          match:  '(?:[&\\|><~\\+\\-\\*\\\\])\\.++'  + # every operator which does not make sense with a trailing dot
                  '(?!\\s*(?:\\d|$|(?://.*)))'         # not followed by a comment or line-break (Scilab states that more than one dot is used as expression continuation over lines)
          name:   'keyword.operator.invalid.illegal.scilab'
        }
        {
          comment: 'trailing equal (=)'
          match:  '(?:[&\\|\\+\\-\\*/\\.\\\\]\\={1,})'  +
                  '|(?:[<~]\\={2,})'
          name:   'keyword.operator.invalid.illegal.scilab'
        }
        {
          comment: 'operator mixing'
          match:  '[\\+\\-\\*/\\\\]{2,}(?<!\\*\\*)'
          name:   'keyword.operator.invalid.illegal.scilab'
        }
        { include: 'source.scilab.version-specific#invalid_operator_combinations'}
      ]
    }

  invalid_operators_all:
    {
      patterns: [
        {  include:  '#invalid_operators'             }
        {  include:  '#invalid_operator_combinations' }
      ]
    }

  invalid_signs:
    {
      match: '[^\\w!\\?\"\\$%\\&/\\(\\)\\=\\[\\]\\\\+\\-\\*\\^~\'#<>\\|\\s:;,\\.\\{\\}]'
      name: 'invalid.illegal.scilab'
    }

  # ------------------------------
  # additional stuff which is present, but does not fit in another category
  # ------------------------------
  continuation_mark:
    {
      comment: 'continuation mark'
      match:   '(\\.{2,})\\s*(.*?)\\s*(?=(?:(?://)|$))'

      captures:
        1:
          name: 'punctuation.separator.continuation.scilab'
        2:
          name: 'invalid.illegal.scilab'
    }

  statement_terminator:
    {
      comment: 'indicates a terminated statement, even in line'
      match: ';'
      name: 'punctuation.terminator.scilab'
    }
  
  variable_assignment:
    {
      patterns: [
        {
          #######################################################################
          # The following lines were an idea --> with really bad performance... #
          #######################################################################
          
          # match: '((?:\\.)?[\\w%\\$\\?!#\\)]+(?:\\(.*\\))?)'  +
          #        '\\s*(\\=)\\s*'                              +
          #        '((?:(?:.(?!/{2,}))*[\\Z$;,]*?)++)?'
          # 
          # captures:
          #   1:
          #     patterns: [
          #       { include:  '#variable_assignment'  }
          # 
          #       {
          #         comment: 'catch the dot-accessor before it will be marked invalid'
          #         match:    '\\.'
          #         name:     'punctuation.accessor.scilab'
          #       }
          # 
          #       { include: '#struct_tlist'  }
          #       { include: '#assignment_retvalContent'  }
          # 
          #       # { include:  '#std_environment'      }
          #     ]
          #   2:
          #     patterns: [
          #       { include:  '#operators_assignment' }
          #     ]
          #   3:
          #     patterns: [
          #       {
          #         match: '([;,]+)\\s*(.*)'
          #         captures:
          #           1:
          #             patterns: [
          #               { include: '#std_environment' }
          #             ]
          #           2:
          #             patterns: [
          #               { include: '#variable_assignment'      }
          #               { include: '#assignment_retvalContent' }
          #             ]
          #       }
          # 
          #       { include:  '#std_environment'  }
          #     ]
          match:  '(?:'  +
                    '((?:(?<=[\\w%\\$\\?!#\\)])\\.\\s*)?'  +  # recognize a valid leading dot
                    '(?:'  +
                      '[a-zA-Z_%\\$\\?!#](?!\\s*//)'    + # variable begin
                      '(?:[\\w%\\$\\?!#](?!\\s*//))*'   + # as much letters as possible (to complete the variable)
                    '))'   +
                    '(' +
                      '(?<parenthesis>\\('                +  # and all stuff in brackets would be also nice
                        '(?:' +
                          '(?:[^()]\\s*(?!//))++'    +
                          '|(?:\\g<parenthesis>+?)'  +
                        ')*?'   +
                      '\\))++'  +
                    ')?' +
                  ')'    +
                  '\\s*' +
                  '(?!\\={2,})' + # more than one equal sign
                  '(\\=)'       + # equal
                  '('     +
                    '(?:' +
                      '(?:' +
                        '(?:\\.\')|[^\'\";]'  + # hate the .' operator, because he's special. Screw this guy!
                      ')(?!/{2,})' +
                    ')++' +
                  ')?'
          
          captures:
            1:
              name: 'meta.name.assignment.scilab'
              patterns: [
                {
                  comment: 'catch the dot-accessor before it will be marked invalid'
                  match:    '\\.'
                  name:     'punctuation.accessor.scilab'
                }
                
                { include: '#struct_tlist'  }
                { include: '#assignment_retvalContent'  }
              ]
            2:
              name: 'meta.name.assignment.scilab'
              patterns: [
                { include: '#std_environment'  }
              ]
            4:
              patterns: [
                { include: '#operators_assignment'  }
              ]
            5:
              patterns:[
                { include: '#std_environment' }
              ]
        }
        {
          comment:  'assignment of multiple variables (one line)'
          match:    '(?<parenthesis>' +
                      '(\\[)' + 
                      '(' +
                        '(?:[^\\[\\]/]++)|(?:\\g<parenthesis>+?)' +
                      ')' +
                      '(\\])'  +
                      '(?!\\s*\\={2,})(?=\\s*\\=)'  +
                    ')'
                    
          name: 'meta.name.assignment.scilab'
          
          captures:
            2:
              name: 'punctuation.section.brackets.begin.scilab'
            3:
              patterns: [
                { include: '#assignment_retvalContent'  }
              ]
            4:
              name: 'punctuation.section.brackets.end.scilab'
        }

        # NOTE:
        # Assignment of one/multiple values over multiple lines is not included.
        # This is the case since there is no way to distinguish matrix-definitons and return values first hand.
        # (since the language parser of Atom will extend until EOF if no match was found)

      ]
    }

  assignment_retvalContent:
    {
      patterns: [
        { include: 'source.scilab.version-specific#scilab_comment'  }
        { include: 'source.scilab.version-specific#name_too_long'   }

        { include: '#builtins' }

        # ------------------
        # using parenthesis
        # ------------------
        {
          comment:  'parenthesis without dot accessor behind'
          match:    '([a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*)'  +
                    '(' +
                      '(?<parenthesis>\\(' +
                        '(?:' +
                          '(?:[^()]+)'  +
                          '|(?:\\g<parenthesis>+)' +
                        ')*?' +
                      '\\))++' +
                    ')' +
                    '(?!\\s*(?:\\.|\\)))'

          captures:
            1:
              patterns: [
                { include: '#std_environment' }

                {
                  match: '.+'
                  name: 'variable.assignment.scilab'
                }
              ]
            2:
              patterns: [
                #{ include: '#assignment_retvalContent'}
                { include: '#std_environment' }
              ]
        }
        {
          comment:  'parenthesis with dot accessor behind'
          match:   '([a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*)'  +
                    '(' +
                      '(?<parenthesis>\\(' +
                        '(?:' +
                          '(?:[^()]+)'  +
                          '|(?:\\g<parenthesis>+)' +
                        ')*?' +
                      '\\))++' +
                    ')' +
                    '(?=\\s*(?:\\.))'

          captures:
            0:
              patterns: [
                { include: '#std_environment' }
              ]
        }

        {
          comment: 'matches the rest without dots or opening parenthesis'
          match:   '(?<!\\.\\()(?:[a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*)++(?!\\s*(?:\\.|\\())'
          name:    'variable.assignment.scilab'
        }

        { include: '#parameter_separator' }

        {
          comment: 'illegal number on lhs [123 =]'
          match: '(?<=^|;)\\d+'
          name: 'variable.assignment.invalid.illegal.scilab'
        }
        {
            match: ';'
            name:  'punctuation.terminator.invalid.illegal'
        }

        { include: '#std_environment' }

        {
          comment: 'illegal empty assignments [() = or ( = or ) = or (1) =]'
          match:  '(?<=^|;)'  +
                    '(?:'  +
                      '[\\s\\d]*' +
                      '(?:' +
                        '(?:\\(\\s*$)'    +
                        '|(?:\\((?:\\s*|\\d+)\\))' +
                        # '|(?:\\))'  + # too unspecific
                      ')' +
                    ')'
          name: 'invalid.illegal.scilab'
        }

        {
          match: '(?<=\\.)[a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*'
          name: 'variable.other.member.scilab'
        }
      ]
    }

  simple_function_call:
    {
      comment: 'the only case where one can determine that this is a function call'
      match:  '(?<!\\.)([a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*)\\s*(\\()\\s*(\\))'

      name: 'meta.function-call.scilab'

      captures:
        1:
          patterns: [
            { include: '#std_environment' }
          ]
        2:
          name: 'punctuation.brace.round.scilab'
        3:
          name: 'punctuation.brace.round.scilab'

    }
