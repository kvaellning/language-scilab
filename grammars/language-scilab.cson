'scopeName': 'source.scilab'
'name':      'Scilab'
'fileTypes': ['sci', 'sce']

'patterns': [
  { 'include': '#scilab_comment' }

  {
    'comment': 'Scilab function definition'
    'match': '\\s*(?<![[\\w%\\$\\?!#]])(function)\\s+(.*?)($)'
    'name': 'meta.function.scilab'

    'captures':
      '1':
        'comment': 'function keyword'
        'name': 'storage.type.function.begin.scilab'
      '2':
        'patterns':[
          { 'include':  '#scilab_comment' }

          { 'include':  '#invalid_parameter_signs' }
          { 'include':  '#invalid_signs'           }

          { 'include': '#name_too_long' }

          {
            'comment': 'return values'
            'match': '[^/]{2,}\\s*\\='
            'name':  'meta.function.parameters.scilab'

            'captures':
              '0':
                'patterns':[
                  {
                    'comment': 'some brackets are illegal for defining return values'
                    'match': '[\\(\\)\\{\\}]'
                    'name':  'invalid.illegal.scilab'
                  }
                  {
                    'match': '\\['
                    'name': 'punctuation.section.brackets.begin.scilab'
                  }
                  {
                    'comment': 'numbers only are clearly illegal'
                    'match': '(?<![\\w%\\$\\?!#\\.])(?<=^|\\s|\\[|,)\\d+'
                    'name': 'variable.parameter.output.invalid.illegal.scilab'
                  }

                  { 'include': '#invalid_parameter_struct-tlist' }
                  { 'include': '#std_environment' }

                  { 'include': '#parameters_output'    }
                  { 'include': '#parameters_separator' }

                  {
                    'match': '\\]'
                    'name': 'punctuation.section.brackets.end.scilab'
                  }
                ]
          }

          {  'include':  '#function_name'  }

          {
            'comment': 'input values'
            'match': '(\\()(.*)'
            'name': 'meta.function.parameters.scilab'

            'captures':
              '1':
                'name': 'punctuation.section.parens.begin.scilab'
              '2':
                'patterns':[
                  {
                    'comment': 'numbers only are clearly illegal'
                    'match': '(?<![\\w%\\$\\?!#\\.])(?<=^|\\s|\\(|,)\\d+'
                    'name': 'variable.parameter.input.invalid.illegal.scilab'
                  }
                  {
                    'comment': 'Any parenthesis stuff except of one ) is also clearly illegal'
                    'match': '(\\[)|(\\])|(\\()'
                    'captures':
                      '1':
                        'name': 'punctuation.brackets.begin.invalid.illegal.scilab'
                      '2':
                        'name': 'punctuation.brackets.end.invalid.illegal.scilab'
                      '3':
                        'name': 'punctuation.parens.begin.invalid.illegal.scilab'
                  }

                  { 'include': '#scilab_comment' }

                  { 'include': '#invalid_parameter_struct-tlist' }
                  { 'include': '#std_environment' }

                  { 'include':  '#parameters_input'     }
                  { 'include':  '#parameters_separator' }
                ]
              '3':
                'name': 'punctuation.section.parens.end.scilab'
          }
        ]

      '3':
        'comment': 'end variable declaration'
        'name': 'storage.section.function.begin.scilab'
  }

  {
    'comment': 'End of a function (a.k.a. "endfunction" tag'
    'match': '^\\s*endfunction'
    'name': 'storage.type.function.end.scilab'
  }

  { 'include': '#std_environment' }

  { 'include': '#variable_assignment' }
  { 'include': '#vector_colon'        }
]

# ------------------------------
# additional definitions
# ------------------------------
'repository':
  'std_environment':
    {
      'comment': 'This includes all constants and data types which are used for scoping'
      'patterns':[
        { 'include': '#continuation_mark' }
        { 'include': '#numbers'           }

        { 'include': '#name_too_long'         }
        { 'include': '#invalid_signs'         }
        { 'include': '#invalid_operators_all' }

        { 'include': '#operators' }

        { 'include': '#constants_matrix_vector' }

        { 'include': '#constants'    }
        { 'include': '#keywords'     }

        { 'include': 'source.scilab.predefined-functions#_scilab_functions'  }

        { 'include': '#statement_terminator' }

        { 'include': '#strings'  }
        { 'include': '#struct_tlist' }
      ]
    }
  # ------------------------------
  # all kinds of parameters and variables
  #
  # Note:  They all share the same matching pattern, because for Scilab naming in
  #      regards of function / variables follow the same rules.
  #      They are just groupted here for easier copy & paste maintainance in futre.
  # ------------------------------

  'function_name':
    {
      'match': '[a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*'
      'name': 'entity.name.function.scilab'
    }

  'parameters_input':
    {
      'comment': 'input parameters of functions'
      'match': '[a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*'
      'name': 'variable.parameter.input.scilab'
    }

  'parameters_output':
    {
      'comment': 'output parameters of functions'
      'match': '[a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*'
      'name': 'variable.parameter.output.scilab'
    }

  'parameters_separator':
    {
      'match': ','
      'name': 'punctuation.separator.parameters.scilab'
    }

  'vector_colon':
    {
      'comment': 'vector definition a:b & a:b:c'
      'match': '\\b' +
            '(?<signs>\\+|-)?'                  +  #  optional leading +/-
            '(?<element>[\\w\\$\\?!%\\.\'\"]+)' +  #  first vector element
            ':'  +
            '\\g<signs>?'  +  #  optional leading +/-
            '\\g<element>' +  #  second vector element
            '(?:'       +
              ':'  +
              '\\g<signs>?'   +  #  optional leading +/-
              '\\g<element>'  +  #  optional third element
            ')?'
      'captures':
        '0':
          'name': 'variable.parameter.vector.scilab'
          'patterns':[
            {
              'comment': 'avoid matching as invalid operator'
              'match': ':(?:\\+|-)'
            }

            {  'include':  '#std_environment' }
          ]
    }

  'struct_tlist':
    'patterns':[
      # ----------------------------------------------
      # dot (.)-accessor patterns
      # ----------------------------------------------
      {
        'comment': 'struct element foo.foo'
        'match':  '([a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*)' + # characters at begin
                  '(?>\\(([^\\=;]+)\\))?'               + # all what is inside brackets
                  '(?=\\.[a-zA-Z_%\\$\\?!#])'             # with trailing dot and character

        # example for the second line (all inside of brackets):
        # 1. Consume every valid character until reaching of an opening parenthesis
        # 2. Avoid backtracking and match the rest of the line (or break if = or ; is reached)
        # 3. Backtrack to the first available closing parenthesis
        # 4. Check against the dot

        'captures':
          '1':
            'name': 'variable.other.object.scilab'
          '2':
            'patterns':[
              { 'include': '#std_environment' }
            ]
      }

      {
        'comment': 'struct sub-element foo.FOO'
        'match':  '(?:' +
                    '(?:(?<![\\w%\\$\\?!#\\)])(\\.))'  +  # invalid dot in front
                    '|(\\.)'  +
                  ')' +
                  '([a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*)'

        'captures':
          '1':
            'name': 'punctuation.accessor.invalid.illegal.scilab'
          '2':
            'name': 'punctuation.accessor.scilab'
          '3':
            'name': 'variable.other.member.scilab'
      }

      # --------------------------------------------------------------
      # Automation access is currently not supported.
      # Actually, this is too unspecific, since this might also be a "normal" function call
      # (which it actually really is...). More interpretation of the code needed beforehand.
      # --------------------------------------------------------------

      # --------------------------------------------------------------
      # Deep recognition of structs using ()()-extraction is currently not supported.
      # The code below will work, but it will also eat up performance excessivly.
      # Feature needs re-evaluation.

      # {
      #   'comment': 'scilab struct/tlist accessors foo(1)(a)(b), foo(a(1)(a)) etc. ...'
      #   # Thanks to LukStorms from StackOverflow for the base pattern
      #   # see: http://stackoverflow.com/questions/39540931/atom-language-definition-using-nested-regex-patterns/39544714#39544714
      #   'match':  '[a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*'  +
      #             '(?='   +
      #               '\\s*'  +
      #               '(?<self>'  +
      #                 '\\('   +
      #                 '(?:'   +
      #                   '(?:(?<chars>(?!//))[^\\(\\);])+' + # unfortunatly, (?!//) must examined after consumation of a single sign. This prevents matching based on parenthesis in the comments.
      #                   '|\\g<self>'  + # without recursion, this thing will only match the innermost occurence of an extraction
      #                 ')+?' +
      #                 '\\)' +
      #               ')\\s*' +
      #               '(?:\\((?:\\g<chars>[^;])+?\\))'  + # ...and of course, foo('foo')(1) is a total valid extraction...
      #             ')'
      #
      #   'name': 'variable.other.object.scilab'
      # }

      {
        'comment': 'invalid stuff'
        'match':  '([\\w%\\$\\?!#]+)(\\.)'  +  # (definition that some variable character is standing in front of a dot)
                  '(?:'                     +
                    '(?=\\d)|'              + # trailing dot and number afterwards (struct error)
                    '(?=\\s|\\Z)'           + # lonely trailing dot
                  ')'

        'captures':
          '1':
            'name': 'variable.other.object.scilab'
          '2':
            'name': 'punctuation.accessor.invalid.illegal.scilab'
      }
    ]

  # ------------------------------
  # operators
  # ------------------------------
  'operator_linear_system':
    {
      'comment': 'Operators used for linear system simulation'
      'match': '/\\.' # feedback operator
      'name': 'keyword.operator.CACSD.scilab'
    }

  'operators_arithmetic':
    {
      'comment': 'Arithmetic operators'
      'match': '\\+|-|\\*|/|\\\\|\\^|\\*\\*'  +  # elementary operators
              '|\\.(\\^|(\\*|/|\\\\)\\.?)'       # vector / matrix / kronecker operators
      'name': 'keyword.operator.arithmetic.scilab'
    }

  'operators_logic':
    {
      'comment': 'keyword operators that evaluate to True or False'
      'match': '&|\\||~'
      'name': 'keyword.operator.logical.scilab'
    }

  'operators_comparison':
    {
      'comment': 'comparison operators'
      'match': '\\=\\=|>\\=|<\\=|~\\=|>|<|<>'
      'name': 'keyword.operator.comparison.scilab'
    }

  'operators_assignment':
    {
      'comment': 'assignment operators'
      'match': '\\='
      'name': 'keyword.operator.assignment.scilab'
    }

  'operators':
    {
      'patterns': [
        { 'include': '#operator_linear_system' }
        { 'include': '#operators_arithmetic'   }
        { 'include': '#operators_logic'        }
        { 'include': '#operators_comparison'   }
        { 'include': '#operators_assignment'   }
      ]
    }

  # ------------------------------
  # constants definition
  # ------------------------------
  'numbers':
    {
      'comment': 'Scilab numbers'
      'match': '(?:' +
              '\\B(?:\\.[0-9]+)'            +  # numbers with leading dot (.) (interpreted as zero starting)
              '|\\b(?:[0-9]+\\.?[0-9]*)'    +  # "normal" numbers with optional dot (.) separator
            ')'  +
            '(?:(?:E|e)(?:\\+|-)?[0-9]+)?'  +  # optional exponential notation
            '([a-zA-Z_%\\$\\?!#])?'            # invalid trailing dot
      'name': 'constant.numeric.scilab'
      'captures':
        '1':
          'comment': 'invalid trailing dot-operator (.)'
          'name': 'keyword.operator.invalid.illegal.scilab'
    }

  'constants_scilab':
    {
      'comment': 'Scilab built-in constants'
      'match':  '(?<![\\w%\\$\\?!#\\.])'  +
                '(?:' +
                  '%(?:pi|e|eps|i|inf|io|nan|t|T|f|F|s|z)' + # constants which yield values
                  '|SCI|SCIHOME|TMPDIR|varargin|varargout'         + # other variables
                  '|(?:\\[\\])'                            + # the empty matrix []
                ')(?![\\w%\\$\\?!#\\.])'
      'name': 'support.constant.scilab'
    }

  'constants_matrix_vector':
    {
      'comment': 'matrix/vector access symbols : & $'
      'match': '(?<![\\w%\\$\\?!#\'\"]):(?![\\w%\\$\\?!#\'\"])' + # (:) is only a constant if nothing is written in front or behind
               '|(?<![\\w%\\$\\?!#\'\"\\+\\-\\*\\\\])\\$'         # ($) is only a constant if nothing is written in front
      'name' : 'support.constant.scilab'
    }

  'constants':
    {
      'patterns':[
        { 'include': '#constants_scilab'              }
        { 'include': '#constants_matrix_vector'       }
      ]
    }

  # ------------------------------
  # statement definitions
  # ------------------------------
  'keywords_block_flow_alter':
    {
      'comment': 'keywords that alter flow from within a block'
      'name': 'keyword.control.statement.scilab'
      'match': '(?<!\\.)\\b(break|continue|return|end)\\b'
    }

  'keywords_loop':
    {
      'comment': 'keywords that delimit loops'
      'name': 'keyword.control.repeat.scilab'
      'match': '(?<!\\.)\\b(do|for|while)\\b'
    }

  'keywords_errors':
    {
      'comment': 'keywords that delimit an error'
      'name': 'keyword.control.exception.scilab'
      'match': '(?<!\\.)\\b(try|catch)\\b'
    }

  'keywords_conditionals':
    {
      'comment': 'keywords that delimit flow conditionals'
      'name': 'keyword.control.conditional.scilab'
      'match': '(?<!\\.)\\b(if|elseif|else|select|case)\\b'
    }

  'keywords_other':
    {
      'comment': 'keywords which does not fit in any other category'
      'name': 'keyword.control.scilab'
      'match': '(?<!\\.)\\b(clear|clearglobal|exit|pause|quit|then)\\b'
    }

  'keywords_global':
    {
      'comment': 'global scope identifier'
      'match': '(?<!\\.)\\b(global)\\b'
      'name': 'storage.modifier.global.scilab'
    }

  'keywords':
    'patterns':[
      {  'include':  '#keywords_block_flow_alter' }
      {  'include':  '#keywords_loop'             }
      {  'include':  '#keywords_errors'           }
      {  'include':  '#keywords_conditionals'     }
      {  'include':  '#keywords_other'            }
      {  'include':  '#keywords_global'           }
    ]

  # ------------------------------
  # strings
  # ------------------------------
  'string_single':
    {
      'comment': 'single quoted strings'

      'begin': '(?<![\\w\\]\)])\''
      'end': '\'(?!\')'

      'contentName': 'string.quoted.single.scilab'

      'beginCaptures':
        '0':
          'name': 'punctuation.definition.string.begin.scilab'
      'endCaptures':
        '0':
          'name': 'punctuation.definition.string.end.scilab'

      'patterns': [
        {
          'match': '\'\'|""'
          'name': 'constant.character.escape.scilab'
        }
      ]
    }

  'string_double':
    {
      'comment': 'double quoted strings'

      'begin': '"'
      'end': '"(?!")'

      'contentName': 'string.quoted.double.scilab'

      'beginCaptures':
        '0':
          'name': 'punctuation.definition.string.begin.scilab'
      'endCaptures':
        '0':
          'name': 'punctuation.definition.string.end.scilab'

      'patterns': [
        {
          'match': '\'\'|""'
          'name': 'constant.character.escape.scilab'
        }
      ]
    }

  'strings':
    {
      'patterns':[
        { 'include': '#string_single' }
        { 'include': '#string_double' }
      ]
    }

  # ------------------------------
  # all kinds of invalid stuff
  # ------------------------------
  'name_too_long':
    {
      'comment': 'error if names are too long (>24 signs)'
      'match': '[a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]{24,}'
      'name': 'variable.invalid.illegal.scilab'
    }

  'invalid_parameter_signs':
    {
      'match': '[\\+\\-\\*/\\\\~\\&\\|\\<>\\.]+'
      'name':  'invalid.illegal.scilab'
    }

  'invalid_operators':
    {
      'comment': 'invalid operators'
      'match':
        '\\.[\\+\\-\\^]\\.'        +  # kronecker operators
        '|[^ \\t].*\\=.*\\?.*\\:.*'    # ?: operator
      'name': 'keyword.operator.invalid.illegal.scilab'
    }

  'invalid_operator_combinations':
    {
      'comment': 'invalid operator combinations'
      'match':
        '[&\\|><~\\+\\-\\\\:]{2,}'      +  # match invalid doubling
        '(?<![<>\\-]|&~)'               +  # exceptions
        '|(?:\\=|\\*){3,}'              +  # match from 3 occurences
        '|\\.{1,}[&\\|><~]|\\.{2,}[\\+\\-\\\\]' +  # leading dot(s) (.)
        '|(?:'                                  +  # leading equal(=) group
          '\\={1,}[&\\|><~\\*/\\\\:;]'          +  # standard for all but trailing minus (-) and plus (+)
          '|[\\=]{3,}(\\+|\\-)'                 +  # special cases for minus and plus, since the following operator is interpreted as (polarity) sign of a number
        ')'                                     +  # NOTE: SPECIAL CASE SHOULD BE CHANGED IF CONDITIONALS ARE TREATED AS OWN SCOPE
        '|[&\\|><~]\\.{1,}|[\\+\\-\\*\\\\]\\.{1,}\\D'   +  # trailing dot (.)
        '|[&\\|\\+\\-\\*/\\.\\\\]\\={1,}|[<~]\\={2,}'   +  # trailing equal (=)
        '|[\\+\\-\\*/\\\\]{2,}(?<!\\*\\*)'              +  # operator mixing
        '|[!\\=\\?]{2,}(?<!\\=\\=)'                        # not available operator combinations
      'name': 'keyword.operator.invalid.illegal.scilab'
    }

  'invalid_operators_all':
    {
      'patterns':[
        {  'include':  '#invalid_operators'             }
        {  'include':  '#invalid_operator_combinations' }
      ]
    }

  'invalid_signs':
    {
      'match': '[^\\w!\\?\"\\$%\\&/\\(\\)\\=\\[\\]\\\\+\\-\\*\\^~\'#<>\\|\\s:;,\\.]'
      'name': 'invalid.illegal.scilab'
    }

  'invalid_parameter_struct-tlist':
    {
      'patterns':[
        # structs and tlists are invalid here
        {
          'match': '[a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*(?=\\.[a-zA-Z_%\\$\\?!#])'
          'name': 'variable.other.object.invalid.illegal.scilab'
        }
        {
          'match': '(\\.)([a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*)'
          'captures':
            '1':
              'name': 'punctuation.accessor.invalid.illegal.scilab'
            '2':
              'name': 'variable.other.member.invalid.illegal.scilab'
        }
      ]
    }

  # ------------------------------
  # additional stuff which is present, but does not fit in another category
  # ------------------------------
  'scilab_comment':
    {
      'match': '//.*+'
      'name': 'comment.line.double-slash.scilab'
    }

  'continuation_mark':
    {
      'comment': 'continuation mark'
      'match': '[\\.]{2,}'
      'name': 'punctuation.separator.continuation.scilab'
    }

  'statement_terminator':
    {
      'comment': 'indicates a terminated statement, even in line'
      'match': ';'
      'name': 'punctuation.terminator.scilab'
    }

  'variable_assignment':
    {
      'match':  '(?:' +
                  '(?:'   +
                    '(?<assign>'  +
                      '(?<charsSimple>[\\w%\\$\\?!#](?!\\s*//))+' + # case 1: "simple" assignment with no parenthesis
                      '(?:'                                       + # case 2: assignment with parenthesis
                        '\\(\\s*["\']?'                 + # beginning parenthesis
                          '.+?'                         + # again anything
                        '["\']?\\s*\\)'                 + # ending parenthesis
                        '(?:\\.\\g<charsSimple>+)?'     + # optional stuff on the end
                      ')?' +
                    ')' +
                    '|(?:'  +
                      '\\[[^;\\=]*?\\]' + # grab the stuff in squared brackets
                    ')'     +
                  ')' +
                  '|(?:\\g<charsSimple>\\.\\g<assign>)' + # case 3: assignment with a dot any anything other behind
                ')'   +
                '\\s*' +
                '(?!\\s*[\\=]{2,})' + # more than one equal sign
                '(?=\\=)'

      'name': 'meta.name.assignment.scilab'

      'captures':
        '0':
          'patterns':[
            {
              'comment': 'illegal number on lhs [123 =]'
              'match': '(?<=^|;)\\d+'
              'name': 'variable.assignment.invalid.illegal.scilab'
            }

            { 'include': '#std_environment' }

            {
              'comment': 'illegal empty assignments [() = or ( = or ) = or (1) =]'
              'match':  '(?<=^|;)'  +
                        '(?:'  +
                          '[\\s\\d]*' +
                          '(?:' +
                            '(?:\\(\\s*$)'    +
                            '|(?:\\((?:\\s*|\\d+)\\))' +
                            # '|(?:\\))'  + # too unspecific
                          ')' +
                        ')'
              'name': 'invalid.illegal.scilab'
            }

            {
              'comment': 'exclude stuff in brackets'
              'match': '\\(.*?\\)'
              'captures':
                '0':
                  'patterns': [
                    { 'include': '#std_environment' }
                  ]
            }

            {
              'match': '(?<=\\.)[a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*'
              'name': 'variable.other.member.scilab'
            }

            {
              'match': '[a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*(?=\\s*(?:\\(["\'])|\\.)'
              'name': 'variable.other.object.scilab'
            }

            {
              'match': '[a-zA-Z_%\\$\\?!#][\\w%\\$\\?!#]*'
              'name': 'variable.assignment.scilab'
            }
          ]
    }
